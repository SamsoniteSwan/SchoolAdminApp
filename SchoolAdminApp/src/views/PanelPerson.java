/*
 * Jeremy Swanson
 * Property of / therein / so forth
 */
package views;

import baseclasses.Person;
import java.awt.Component;
import java.util.ArrayList;
import utilities.Clearable;
import utilities.DateUtils;
import utilities.FieldCheckable;

/**
 *
 * @author swans_000
 */
public class PanelPerson extends javax.swing.JPanel implements Clearable {

    public Person newPerson = new Person();

    /**
     * Creates new form PersonPanel
     */
    public PanelPerson() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSSN = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        txtSSN = new javax.swing.JFormattedTextField();
        txtDOB = new javax.swing.JFormattedTextField();
        lblDOBFormat = new javax.swing.JLabel();

        lblSSN.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSSN.setText("SSN:");

        lblDOB.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblDOB.setText("DOB:");
        lblDOB.setToolTipText("");

        txtName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblName.setText("Name:");

        lblAddress.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblAddress.setText("Address:");

        txtSSN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
        try {
            txtSSN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        txtDOB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
        txtDOB.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("MM/dd/yyyy"))));

        lblDOBFormat.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblDOBFormat.setText("(MM/DD/YYYY)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSSN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDOBFormat))
                    .addComponent(txtAddress)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSSN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(69, 69, 69))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSSN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDOB)
                    .addComponent(lblDOBFormat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddress)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDOBFormat;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSSN;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JFormattedTextField txtDOB;
    private javax.swing.JTextField txtName;
    private javax.swing.JFormattedTextField txtSSN;
    // End of variables declaration//GEN-END:variables

    private void setPersonData() {
        //try {
            //checkFields();
            newPerson.setName(txtName.getText());
            newPerson.setSocialSecurityNumber(txtSSN.getText());
            
            // only set address if address is entered
            if(txtAddress.getText().isEmpty()) {
                newPerson.setAddress("");
            } else {
                newPerson.setAddress(txtAddress.getText());
            }
        
            newPerson.setDateOfBirth(DateUtils.formattedTxtFld(txtDOB.getText()));
        //} catch (NoDataException e){
            //e.addFields(missingFields());
        //}
        
    }
    public Person getPerson() {
        setPersonData();
        return newPerson;
    }
    
    @Override
    public void clearData() {
        txtName.setText(null);
        txtAddress.setText(null);
        txtDOB.setValue(null);
        txtSSN.setValue(null);
    }

    /*
    @Override
    public void checkFields() throws NoDataException {
        
        ArrayList<String> fieldNames = new ArrayList();
        if (txtName.getText().equals("")){
            fieldNames.add("Person's Name");           
        }
        if (txtSSN.getText().equals("")){
            fieldNames.add("SSN");           
        }
        
        if (this.missingFields().size() > 0) {
            
            throw new NoDataException(missingFields());
        }
    }*/
    
    public ArrayList<String> missingFields() {
        ArrayList<String> result = new ArrayList();
        
        if (txtName.getText().equals("")){
            result.add("Person's Name");           
        }
        if (txtSSN.getText().trim().length() == 0){
            result.add("SSN");           
        }
        if (txtDOB.getText().length() == 0){
            result.add("Date of Birth");
        }
        return result;
    }

    @Override
    public Component[] clearableItems() {
        return new Component[]{txtName, txtAddress, txtDOB, txtSSN};
    }

}
